{"version":3,"sources":["components/Task/styles.js","components/hooks/useEditField.ts","components/Task/index.tsx","components/AddNewTaskInput/index.tsx","components/Column/index.tsx","components/Navbar/index.js","models/tasks.ts","models/index.ts","pages/Kaban/index.tsx","App.tsx","index.tsx"],"names":["styled","div","selectBadgeColor","priority","high","medium","low","Badge","TBadge","attrs","props","variantColor","rounded","fontSize","p","variant","useEditField","fieldId","onCreate","onEdit","useState","field","setField","isEditing","setIsEditing","inputRef","useRef","useEffect","current","focus","handleCreate","length","handleEdit","onKeyPressed","event","key","handleBlur","handleChange","e","target","value","Task","task","index","colorMode","useColorMode","bgColor","light","dark","id","console","log","draggableId","draggableProps","dragHandleProps","innerRef","Flex","bg","direction","mb","boxShadow","ref","justify","wrap","Input","onBlur","onKeyPress","onChange","placeholder","Text","content","IconButton","onClick","aria-label","icon","size","AddNewTaskInput","PseudoBox","as","display","width","flexDirection","cursor","alignItems","_hover","opacity","Icon","name","pl","Column","columnObj","column","createStatus","editStatus","tasks","title","statusTitle","isEditingGroup","setIsEditingGroup","setStatusTitle","renderEdittingInput","Box","minH","minW","w","base","sm","md","px","align","fontWeight","Menu","closeOnBlur","closeOnSelect","Button","leftIcon","droppableId","droppableProps","map","renderTaskList","Navbar","toggleColorMode","h","py","borderBottomWidth","flex","tasksModel","data","byId","allIds","status","tasksByStatus","computed","state","statusValues","resolveTask","taskId","taskAllIds","setStatus","action","payload","uuid","uuidv4","moveTask","thunk","actions","getState","destination","source","sourceColumn","destinationColumn","sourceTaskIds","destinationTaskIds","splice","storeModel","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","persistConfig","storage","store","createStore","reducerEnhancer","reducer","persistReducer","persistor","persistStore","Kaban","mt","overflowX","onDragEnd","App","ThemeProvider","ColorModeProvider","CSSReset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8873f0c6.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { Badge as TBadge } from \"@chakra-ui/core\";\r\n\r\nexport const Container = styled.div`\r\n  border: 1px solid lightgrey;\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\n// const selectBadgeColor = (priority) => {\r\n//   return (\r\n//     {\r\n//       high: \"#fa9191\",\r\n//       medium: \"#6886c5\",\r\n//       low: \"#58b4ae\",\r\n//     }[priority] || \"#6886c5\"\r\n//   );\r\n// };\r\nconst selectBadgeColor = (priority) => {\r\n  return (\r\n    {\r\n      high: \"red\",\r\n      medium: \"blue\",\r\n      low: \"green\",\r\n    }[priority] || \"blue\"\r\n  );\r\n};\r\n\r\nexport const Badge = styled(TBadge).attrs((props) => ({\r\n  variantColor: selectBadgeColor(props.priority),\r\n  rounded: \"md\",\r\n  fontSize: \"10px\",\r\n  p: \"5px\",\r\n  variant: \"subtle\",\r\n}))`\r\n  /* background-color: ${(props) => selectBadgeColor(props.priority)}; */\r\n  /* width: 30px; */\r\n  /* border-radius: 5px;\r\n  padding: 5px;\r\n  font-size: 10px;\r\n  color: white; */\r\n  /* display: inline-flex; */\r\n  /* justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-end; */\r\n`;\r\n","import {\r\n  RefObject,\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  KeyboardEvent,\r\n  ChangeEvent,\r\n} from \"react\";\r\n\r\ninterface UseEditFieldProps {\r\n  fieldId?: string;\r\n  onCreate: (field: string) => void;\r\n  onEdit: (id: string, field: string) => void;\r\n}\r\n\r\ninterface UseEditFieldResult {\r\n  field: string;\r\n  setField: (s: string) => void;\r\n  isEditing: boolean;\r\n  setIsEditing: (bool: boolean) => void;\r\n  onKeyPressed: (event: KeyboardEvent) => void;\r\n  handleBlur: () => void;\r\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  inputRef: RefObject<HTMLInputElement> | null;\r\n}\r\n\r\nconst useEditField = ({\r\n  fieldId,\r\n  onCreate,\r\n  onEdit,\r\n}: UseEditFieldProps): UseEditFieldResult => {\r\n  const [field, setField] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (isEditing) inputRef?.current?.focus();\r\n  }, [isEditing]);\r\n\r\n  const handleCreate = () => {\r\n    if (onEdit.length > 0) {\r\n      onCreate(field);\r\n      setIsEditing(false);\r\n      setField(\"\");\r\n    } else {\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    if (fieldId && onEdit.length > 0) {\r\n      onEdit(fieldId, field);\r\n      setIsEditing(false);\r\n      setField(\"\");\r\n    } else {\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setField(e.target.value);\r\n\r\n  const handleBlur = () => {\r\n    if (fieldId) handleEdit();\r\n    else handleCreate();\r\n  };\r\n\r\n  const onKeyPressed = (event: KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n      if (fieldId) handleEdit();\r\n      else handleCreate();\r\n    }\r\n  };\r\n\r\n  return {\r\n    field,\r\n    setField,\r\n    isEditing,\r\n    setIsEditing,\r\n    onKeyPressed,\r\n    handleBlur,\r\n    handleChange,\r\n    inputRef,\r\n  };\r\n};\r\n\r\nexport default useEditField;\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { Badge } from \"./styles\";\r\nimport { Text, Flex, useColorMode, Input, IconButton } from \"@chakra-ui/core\";\r\nimport useEditField from \"components/hooks/useEditField\";\r\n\r\ninterface Props {\r\n  task?: any;\r\n  index: number;\r\n}\r\n\r\nconst Task: React.FC<Props> = ({ task, index }) => {\r\n  const { colorMode } = useColorMode();\r\n  const bgColor: any = { light: \"whiteAlpha.900\", dark: \"gray.800\" };\r\n\r\n  const {\r\n    field,\r\n    isEditing,\r\n    setIsEditing,\r\n    setField,\r\n    inputRef,\r\n    handleBlur,\r\n    handleChange,\r\n    onKeyPressed,\r\n  } = useEditField({\r\n    fieldId: task?.id,\r\n    onCreate: (field) => console.log(field),\r\n    onEdit: (id, field) => console.log(id, field),\r\n  });\r\n\r\n  const renderEdittingInput = () => {\r\n    return (\r\n      <Input\r\n        onBlur={handleBlur}\r\n        ref={inputRef}\r\n        value={field}\r\n        onKeyPress={onKeyPressed}\r\n        onChange={handleChange}\r\n        variant=\"unstyled\"\r\n        placeholder=\"Task Name\"\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Draggable draggableId={task.id} index={index}>\r\n      {({ draggableProps, dragHandleProps, innerRef }) => (\r\n        <Flex\r\n          bg={bgColor[colorMode]}\r\n          direction=\"column\"\r\n          p={2}\r\n          mb={2}\r\n          boxShadow=\"md\"\r\n          rounded=\"md\"\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n          ref={innerRef}\r\n        >\r\n          <Flex mb={2} justify=\"space-between\" direction=\"row\" wrap=\"nowrap\">\r\n            {isEditing ? (\r\n              renderEdittingInput()\r\n            ) : (\r\n              <Text fontSize=\"sm\">{task?.content}</Text>\r\n            )}\r\n            <IconButton\r\n              onClick={() => {\r\n                setIsEditing(true);\r\n                setField(task?.content || \"\");\r\n              }}\r\n              variant=\"ghost\"\r\n              aria-label=\"Edit Task\"\r\n              icon=\"edit\"\r\n              size=\"xs\"\r\n            />\r\n          </Flex>\r\n          <Flex justify=\"flex-start\">\r\n            <Text fontSize=\"10px\">\r\n              <Badge priority={task.priority}>{task.priority}</Badge>\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport { PseudoBox, Icon, Text } from \"@chakra-ui/core\";\r\n\r\n// import { Container } from './styles';\r\n\r\nconst AddNewTaskInput: React.FC<{\r\n  onClick: () => void;\r\n}> = ({ onClick }) => {\r\n  return (\r\n    <PseudoBox\r\n      as=\"button\"\r\n      display=\"flex\"\r\n      width=\"100%\"\r\n      flexDirection=\"row\"\r\n      p={2}\r\n      mb={2}\r\n      boxShadow=\"xs\"\r\n      rounded=\"md\"\r\n      cursor=\"pointer\"\r\n      alignItems=\"center\"\r\n      _hover={{\r\n        opacity: 0.5,\r\n      }}\r\n      opacity={8 / 10}\r\n      onClick={onClick}\r\n    >\r\n      <Icon name=\"add\" size=\"10px\" />\r\n      <Text fontSize=\"sm\" pl={2}>\r\n        Add New Task\r\n      </Text>\r\n    </PseudoBox>\r\n    // </Button>\r\n  );\r\n};\r\n\r\nexport default AddNewTaskInput;\r\n","import React from \"react\";\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport Task from \"../Task\";\r\n\r\nimport {\r\n  Box,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  Icon,\r\n  Input,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n} from \"@chakra-ui/core\";\r\nimport { TasksByStatus, Status } from \"models/tasks\";\r\nimport AddNewTaskInput from \"components/AddNewTaskInput\";\r\nimport useEditField from \"components/hooks/useEditField\";\r\n\r\ninterface Props {\r\n  column?: TasksByStatus;\r\n  createStatus: (status: Partial<Status>) => void;\r\n  editStatus: (status: Partial<Status>) => void;\r\n}\r\n\r\nconst Column: React.FC<Props> = ({ column, createStatus, editStatus }) => {\r\n  const tasks = column?.tasks;\r\n\r\n  // const [statusTitle, setStatusTitle] = useState(\"\");\r\n  // const [isEditingGroup, setIsEditingGroup] = useState(false);\r\n  // const [isEditingNewTask, setIsEditingNewTask] = useState(false);\r\n  // const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // useEffect(() => {\r\n  //   if (isEditingGroup) inputRef?.current?.focus();\r\n  // }, [isEditingGroup]);\r\n\r\n  // const handleCreateStatus = () => {\r\n  //   if (statusTitle.length > 0) {\r\n  //     createStatus({\r\n  //       title: statusTitle,\r\n  //       tasks: [],\r\n  //     });\r\n  //     setIsEditingGroup(false);\r\n  //     setStatusTitle(\"\");\r\n  //   } else {\r\n  //     setIsEditingGroup(false);\r\n  //   }\r\n  // };\r\n\r\n  // const handleEditStatus = () => {\r\n  //   if (column && statusTitle.length > 0) {\r\n  //     editStatus({\r\n  //       id: column.id,\r\n  //       title: statusTitle,\r\n  //     });\r\n  //     setIsEditingGroup(false);\r\n  //     setStatusTitle(\"\");\r\n  //   } else {\r\n  //     setIsEditingGroup(false);\r\n  //   }\r\n  // };\r\n\r\n  // const handleBlur = () => {\r\n  //   if (column?.id) handleEditStatus();\r\n  //   else handleCreateStatus();\r\n  // };\r\n\r\n  // const onKeyPressed = (event: KeyboardEvent) => {\r\n  //   if (event.key === \"Enter\") {\r\n  //     if (column?.id) handleEditStatus();\r\n  //     else handleCreateStatus();\r\n  //   }\r\n  // };\r\n\r\n  const {\r\n    field: statusTitle,\r\n    isEditing: isEditingGroup,\r\n    setIsEditing: setIsEditingGroup,\r\n    setField: setStatusTitle,\r\n    inputRef,\r\n    handleBlur,\r\n    handleChange,\r\n    onKeyPressed,\r\n  } = useEditField({\r\n    fieldId: column?.id,\r\n    onCreate: (field) => createStatus({ title: field }),\r\n    onEdit: (id, field) => editStatus({ id: id, title: field }),\r\n  });\r\n\r\n  const renderMenu = () => {\r\n    return (\r\n      <Menu closeOnBlur closeOnSelect>\r\n        <MenuButton\r\n          as={Button}\r\n          size=\"sm\"\r\n          // @ts-ignore\r\n          variant=\"ghost\"\r\n        >\r\n          <Icon name=\"chevron-down\" />\r\n        </MenuButton>\r\n        <MenuList>\r\n          <MenuItem\r\n            onClick={() => {\r\n              setIsEditingGroup(true);\r\n              setStatusTitle(column?.title || \"\");\r\n            }}\r\n          >\r\n            Edit Status Name\r\n          </MenuItem>\r\n          <MenuItem>Remove Status</MenuItem>\r\n        </MenuList>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  const renderEdittingInput = () => {\r\n    return (\r\n      <Input\r\n        onBlur={handleBlur}\r\n        ref={inputRef}\r\n        value={statusTitle}\r\n        onKeyPress={onKeyPressed}\r\n        onChange={handleChange}\r\n        variant=\"unstyled\"\r\n        placeholder=\"Status name\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderEmptyColumnHeader = () => {\r\n    return (\r\n      <Flex mb={4} px={2} justify=\"space-between\" align=\"center\">\r\n        {isEditingGroup ? (\r\n          renderEdittingInput()\r\n        ) : (\r\n          <Button\r\n            onClick={() => setIsEditingGroup(true)}\r\n            leftIcon=\"add\"\r\n            size=\"sm\"\r\n            bg=\"transparent\"\r\n          >\r\n            Add a group\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const renderHeader = (columnObj: TasksByStatus) => {\r\n    return (\r\n      <Flex mb={4} px={2} justify=\"space-between\" align=\"center\">\r\n        {isEditingGroup ? (\r\n          renderEdittingInput()\r\n        ) : (\r\n          <Text fontSize=\"md\" fontWeight=\"bold\">\r\n            {columnObj.title}\r\n          </Text>\r\n        )}\r\n\r\n        {renderMenu()}\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const renderTaskList = (columnObj: TasksByStatus) => {\r\n    return (\r\n      <Droppable droppableId={columnObj.id}>\r\n        {({ droppableProps, innerRef, placeholder }) => (\r\n          <Box minH={200} ref={innerRef} {...droppableProps}>\r\n            {tasks &&\r\n              tasks.map((task, index) => (\r\n                <Task key={task?.id} task={task} index={index} />\r\n              ))}\r\n            {placeholder}\r\n\r\n            {column && (\r\n              <AddNewTaskInput\r\n                key={`${column.id}`}\r\n                onClick={() => console.log(column.id)}\r\n              />\r\n            )}\r\n          </Box>\r\n        )}\r\n      </Droppable>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box minH=\"60vh\" minW={200} w={{ base: \"100%\", sm: \"50%\", md: 300 }} p={3}>\r\n      {column ? renderHeader(column) : renderEmptyColumnHeader()}\r\n      {column && tasks && renderTaskList(column)}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import React from \"react\";\r\nimport { Flex, Text, Box, Button, Icon, useColorMode } from \"@chakra-ui/core\";\r\n\r\nfunction Navbar() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Flex\r\n      w=\"100%\"\r\n      h={50}\r\n      justify=\"space-between\"\r\n      align=\"center\"\r\n      px={8}\r\n      py={4}\r\n      borderBottomWidth=\"1px\"\r\n    >\r\n      <Box flex={2}>\r\n        <Text fontWeight=\"bold\">Kaban Board</Text>\r\n      </Box>\r\n      <Flex flex={1} justify=\"flex-end\">\r\n        <Button size=\"sm\" onClick={toggleColorMode} variant=\"ghost\">\r\n          <Icon name={colorMode === \"light\" ? \"moon\" : \"sun\"} />\r\n        </Button>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import { action, Action, computed, Computed, thunk, Thunk } from \"easy-peasy\";\r\nimport { DropResult } from \"react-beautiful-dnd\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\ntype Priority = \"high\" | \"medium\" | \"low\";\r\n\r\nexport interface Task {\r\n  id: string;\r\n  content: string;\r\n  priority: Priority;\r\n}\r\n\r\nexport interface Status {\r\n  id: string;\r\n  title: string;\r\n  tasks: string[];\r\n}\r\n\r\nexport interface TasksByStatus {\r\n  id: string;\r\n  title: string;\r\n  tasks: Task[];\r\n}\r\n\r\nexport interface TasksData {\r\n  byId: {\r\n    [key: string]: Task;\r\n  };\r\n  allIds: string[];\r\n}\r\n\r\nexport interface StatusData {\r\n  byId: {\r\n    [key: string]: Status;\r\n  };\r\n  allIds: string[];\r\n}\r\nexport interface Data {\r\n  tasks: TasksData;\r\n  status: StatusData;\r\n}\r\n\r\nexport interface TasksModel {\r\n  data: Data;\r\n  tasksByStatus: Computed<TasksModel, TasksByStatus[]>;\r\n  setStatus: Action<TasksModel, StatusData>;\r\n  createStatus: Action<TasksModel, Partial<Status>>;\r\n  editStatus: Action<TasksModel, Partial<Status>>;\r\n  moveTask: Thunk<TasksModel, DropResult>;\r\n}\r\n\r\nconst INITIAL_STATE: Data = {\r\n  tasks: {\r\n    byId: {\r\n      \"task-1\": {\r\n        id: \"task-1\",\r\n        content: \"Wash the dishes\",\r\n        priority: \"low\" as Priority,\r\n      },\r\n      \"task-2\": {\r\n        id: \"task-2\",\r\n        content: \"Procratinate\",\r\n        priority: \"high\" as Priority,\r\n      },\r\n      \"task-3\": {\r\n        id: \"task-3\",\r\n        content: \"Do some actual work\",\r\n        priority: \"medium\" as Priority,\r\n      },\r\n      \"task-4\": {\r\n        id: \"task-4\",\r\n        content: \"Sleep, please! 😢😢😢😢\",\r\n        priority: \"low\" as Priority,\r\n      },\r\n      \"task-5\": {\r\n        id: \"task-5\",\r\n        content: \"Stay awake at all costs!\",\r\n        priority: \"high\" as Priority,\r\n      },\r\n    },\r\n    allIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\", \"task-5\"],\r\n  },\r\n  status: {\r\n    byId: {\r\n      \"column-1\": {\r\n        id: \"column-1\",\r\n        title: \"To Do\",\r\n        tasks: [\"task-1\", \"task-2\"],\r\n      },\r\n      \"column-2\": {\r\n        id: \"column-2\",\r\n        title: \"Doing\",\r\n        tasks: [\"task-3\", \"task-4\", \"task-5\"],\r\n      },\r\n    },\r\n    allIds: [\"column-1\", \"column-2\"],\r\n  },\r\n};\r\n\r\nexport const tasksModel: TasksModel = {\r\n  data: INITIAL_STATE,\r\n  tasksByStatus: computed((state) => {\r\n    const { tasks, status } = state.data;\r\n    const statusValues = status.allIds.map((id) => status.byId[id]);\r\n    console.log(statusValues);\r\n    const resolveTask = (taskId: string) => tasks.byId[taskId];\r\n    const mapTasks = (taskAllIds: string[]) => taskAllIds.map(resolveTask);\r\n    return statusValues.map((status: Status) => ({\r\n      ...status,\r\n      tasks: mapTasks(status.tasks),\r\n    }));\r\n  }),\r\n\r\n  setStatus: action((state, payload) => {\r\n    state.data.status = payload;\r\n  }),\r\n  createStatus: action((state, payload) => {\r\n    const uuid = uuidv4();\r\n    state.data.status = {\r\n      byId: {\r\n        ...state.data.status.byId,\r\n        [uuid]: {\r\n          id: uuid,\r\n          title: payload.title || \"New Column\",\r\n          tasks: [],\r\n        },\r\n      },\r\n      allIds: [...state.data.status.allIds, uuid],\r\n    };\r\n  }),\r\n  editStatus: action((state, payload) => {\r\n    if (payload?.id) {\r\n      state.data.status = {\r\n        byId: {\r\n          ...state.data.status.byId,\r\n          [payload.id]: {\r\n            ...state.data.status.byId[payload.id],\r\n            title: payload.title || state.data.status.byId[payload.id].title,\r\n          },\r\n        },\r\n        allIds: [...state.data.status.allIds],\r\n      };\r\n    } else return state;\r\n  }),\r\n\r\n  moveTask: thunk((actions, payload, { getState }) => {\r\n    const { destination, source, draggableId } = payload;\r\n    if (\r\n      !destination ||\r\n      (destination.droppableId === source.droppableId &&\r\n        destination.index === source.index)\r\n    ) {\r\n      return;\r\n    }\r\n    const sourceColumn = getState().data.status.byId[source.droppableId];\r\n    const destinationColumn = getState().data.status.byId[\r\n      destination.droppableId\r\n    ];\r\n    const sourceTaskIds = [...sourceColumn.tasks];\r\n    const destinationTaskIds = [...destinationColumn.tasks];\r\n\r\n    if (destination.droppableId === source.droppableId) {\r\n      sourceTaskIds.splice(source.index, 1);\r\n      sourceTaskIds.splice(destination.index, 0, draggableId);\r\n      actions.setStatus({\r\n        ...getState().data.status,\r\n        byId: {\r\n          ...getState().data.status.byId,\r\n          [source.droppableId]: {\r\n            ...sourceColumn,\r\n            tasks: sourceTaskIds,\r\n          },\r\n        },\r\n      });\r\n    } else {\r\n      sourceTaskIds.splice(source.index, 1);\r\n      destinationTaskIds.splice(destination.index, 0, draggableId);\r\n      actions.setStatus({\r\n        ...getState().data.status,\r\n        byId: {\r\n          ...getState().data.status.byId,\r\n          [source.droppableId]: {\r\n            ...sourceColumn,\r\n            tasks: sourceTaskIds,\r\n          },\r\n          [destination.droppableId]: {\r\n            ...destinationColumn,\r\n            tasks: destinationTaskIds,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }),\r\n};\r\n","import { createStore, createTypedHooks } from \"easy-peasy\";\r\nimport { tasksModel, TasksModel } from \"./tasks\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\ninterface StoreModel {\r\n  tasks: TasksModel;\r\n}\r\n\r\nconst storeModel: StoreModel = {\r\n  tasks: tasksModel,\r\n};\r\n\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage: storage,\r\n};\r\nexport const store = createStore(storeModel, {\r\n  reducerEnhancer: (reducer) => persistReducer(persistConfig, reducer),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Column from \"components/Column\";\r\nimport { Flex } from \"@chakra-ui/core\";\r\nimport Navbar from \"components/Navbar\";\r\nimport { useStoreState, useStoreActions } from \"models\";\r\n\r\nfunction Kaban() {\r\n  const tasksByStatus = useStoreState((state) => state.tasks.tasksByStatus);\r\n  const moveTask = useStoreActions((actions) => actions.tasks.moveTask);\r\n  const createStatus = useStoreActions((actions) => actions.tasks.createStatus);\r\n  const editStatus = useStoreActions((actions) => actions.tasks.editStatus);\r\n\r\n  return (\r\n    <Flex h=\"100%\" direction=\"column\">\r\n      <Navbar />\r\n      <Flex flex={1} mt={15} wrap=\"nowrap\" overflowX=\"scroll\">\r\n        <DragDropContext onDragEnd={moveTask}>\r\n          {tasksByStatus.map((status) => {\r\n            const column = status;\r\n            return (\r\n              <Column\r\n                key={column.id}\r\n                column={column}\r\n                createStatus={createStatus}\r\n                editStatus={editStatus}\r\n              />\r\n            );\r\n          })}\r\n          <Column\r\n            key=\"new-column\"\r\n            createStatus={createStatus}\r\n            editStatus={editStatus}\r\n          />\r\n        </DragDropContext>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Kaban;\r\n","import React from \"react\";\r\nimport { ThemeProvider } from \"@chakra-ui/core\";\r\nimport { CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\r\nimport Kaban from \"pages/Kaban\";\r\n\r\nimport { store, persistor } from \"models\";\r\nimport { StoreProvider } from \"easy-peasy\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <StoreProvider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <ThemeProvider>\r\n          <ColorModeProvider>\r\n            <CSSReset />\r\n            <Kaban />\r\n          </ColorModeProvider>\r\n        </ThemeProvider>\r\n      </PersistGate>\r\n    </StoreProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}