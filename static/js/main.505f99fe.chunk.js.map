{"version":3,"sources":["components/Task/styles.js","components/hooks/useEditField.ts","components/Task/index.tsx","components/AddNewTaskInput/index.tsx","components/Column/index.tsx","components/Navbar/index.js","models/tasks.ts","models/index.ts","pages/Kaban/index.tsx","App.tsx","index.tsx"],"names":["styled","div","Badge","TBadge","attrs","props","variantColor","priority","high","medium","low","rounded","fontSize","p","variant","useEditField","fieldId","onCreate","onEdit","autoFocus","useState","field","setField","isEditing","setIsEditing","inputRef","useRef","useEffect","current","focus","handleCreate","length","handleEdit","onKeyPressed","event","key","handleBlur","handleChange","e","target","value","React","memo","statusId","task","index","draggable","createTask","showAddTask","deleteTask","editTask","colorMode","useColorMode","bgColor","light","dark","id","content","renderTaskContent","dragHandleProps","Flex","justify","direction","flex","wrap","Input","onBlur","onClick","stopPropagation","ref","onKeyPress","onChange","placeholder","size","Text","userSelect","pt","renderMenu","Menu","closeOnBlur","closeOnSelect","as","Button","Icon","name","draggableId","isDragDisabled","draggableProps","innerRef","bg","mb","boxShadow","console","log","AddNewTaskInput","PseudoBox","display","width","flexDirection","cursor","alignItems","_hover","opacity","pl","Column","columnObj","column","createStatus","editStatus","tasks","title","statusTitle","isEditingGroup","setIsEditingGroup","setStatusTitle","isAddingNewTask","setIsAddingNewTask","renderEdittingInput","Box","minH","minW","w","base","sm","md","px","align","fontWeight","leftIcon","droppableId","droppableProps","map","args","renderTaskList","Navbar","toggleColorMode","h","py","borderBottomWidth","tasksModel","data","byId","allIds","status","tasksByStatus","computed","state","statusValues","resolveTask","taskId","taskAllIds","setStatus","action","payload","setTasks","uuid","uuidv4","thunk","actions","getState","objTasks","_","removedTaskById","objStatus","stat","removedTasksFromStatus","moveTask","destination","source","sourceColumn","destinationColumn","sourceTaskIds","destinationTaskIds","splice","storeModel","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","persistConfig","storage","store","createStore","reducerEnhancer","reducer","persistReducer","persistor","persistStore","Kaban","mt","overflowX","onDragEnd","App","ThemeProvider","ColorModeProvider","CSSReset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.505f99fe.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { Badge as TBadge } from \"@chakra-ui/core\";\r\n\r\nexport const Container = styled.div`\r\n  border: 1px solid lightgrey;\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst selectBadgeColor = (priority) => {\r\n  return (\r\n    {\r\n      high: \"red\",\r\n      medium: \"blue\",\r\n      low: \"green\",\r\n    }[priority] || \"blue\"\r\n  );\r\n};\r\n\r\nexport const Badge = styled(TBadge).attrs((props) => ({\r\n  variantColor: selectBadgeColor(props.priority),\r\n  rounded: \"md\",\r\n  fontSize: \"10px\",\r\n  p: \"5px\",\r\n  variant: \"subtle\",\r\n}))``;\r\n","import {\r\n  RefObject,\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  KeyboardEvent,\r\n  ChangeEvent,\r\n} from \"react\";\r\n\r\ninterface UseEditFieldProps {\r\n  fieldId?: string;\r\n  onCreate: (field: string) => void;\r\n  onEdit: (id: string, field: string) => void;\r\n  autoFocus?: boolean;\r\n}\r\n\r\ninterface UseEditFieldResult {\r\n  field: string;\r\n  setField: (s: string) => void;\r\n  isEditing: boolean;\r\n  setIsEditing: (bool: boolean) => void;\r\n  onKeyPressed: (event: KeyboardEvent) => void;\r\n  handleBlur: () => void;\r\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  inputRef: RefObject<HTMLInputElement> | null;\r\n}\r\n\r\nconst useEditField = ({\r\n  fieldId,\r\n  onCreate,\r\n  onEdit,\r\n  autoFocus = false,\r\n}: UseEditFieldProps): UseEditFieldResult => {\r\n  const [field, setField] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(autoFocus);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (isEditing && inputRef?.current) inputRef?.current?.focus();\r\n  }, [isEditing, inputRef]);\r\n\r\n  const handleCreate = () => {\r\n    if (field.length > 0) {\r\n      onCreate(field);\r\n      setIsEditing(false);\r\n      setField(\"\");\r\n    } else {\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    if (fieldId && field.length > 0) {\r\n      onEdit(fieldId, field);\r\n      setIsEditing(false);\r\n      setField(\"\");\r\n    } else {\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setField(e.target.value);\r\n\r\n  const handleBlur = () => {\r\n    if (fieldId) handleEdit();\r\n    else handleCreate();\r\n  };\r\n\r\n  const onKeyPressed = (event: KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n      if (fieldId) handleEdit();\r\n      else handleCreate();\r\n    }\r\n  };\r\n\r\n  return {\r\n    field,\r\n    setField,\r\n    isEditing,\r\n    setIsEditing,\r\n    onKeyPressed,\r\n    handleBlur,\r\n    handleChange,\r\n    inputRef,\r\n  };\r\n};\r\n\r\nexport default useEditField;\r\n","import React, { useEffect } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { Badge } from \"./styles\";\r\nimport {\r\n  Text,\r\n  Flex,\r\n  useColorMode,\r\n  Input,\r\n  IconButton,\r\n  Menu,\r\n  MenuButton,\r\n  Button,\r\n  Icon,\r\n  MenuList,\r\n  MenuItem,\r\n} from \"@chakra-ui/core\";\r\nimport useEditField from \"components/hooks/useEditField\";\r\nimport { Task as ITask, TaskWithStatus } from \"models/tasks\";\r\n\r\ninterface Props {\r\n  statusId: string;\r\n  task?: ITask;\r\n  index: number;\r\n  autoFocus?: boolean;\r\n  draggable?: boolean;\r\n  showAddTask?: boolean;\r\n  editTask: (task: Partial<ITask>) => void;\r\n  createTask: (task: Partial<TaskWithStatus>) => void;\r\n  deleteTask: ({ id }: { id: string }) => void;\r\n}\r\n\r\nconst Task: React.FC<Props> = ({\r\n  statusId,\r\n  task,\r\n  index,\r\n  draggable = true,\r\n  autoFocus = false,\r\n  showAddTask = false,\r\n  createTask,\r\n  deleteTask,\r\n  editTask,\r\n}) => {\r\n  const { colorMode } = useColorMode();\r\n  const bgColor: any = { light: \"whiteAlpha.900\", dark: \"gray.800\" };\r\n\r\n  const {\r\n    field,\r\n    isEditing,\r\n    setIsEditing,\r\n    setField,\r\n    inputRef,\r\n    handleBlur,\r\n    handleChange,\r\n    onKeyPressed,\r\n  } = useEditField({\r\n    autoFocus,\r\n    fieldId: task?.id,\r\n    onCreate: (field) =>\r\n      createTask({\r\n        statusId,\r\n        content: field,\r\n      }),\r\n    onEdit: (id, field) =>\r\n      editTask({\r\n        id: id,\r\n        content: field,\r\n      }),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (autoFocus && inputRef?.current) inputRef?.current?.focus();\r\n  }, [autoFocus, inputRef]);\r\n\r\n  const renderEdittingInput = () => {\r\n    return (\r\n      <Input\r\n        onBlur={handleBlur}\r\n        onClick={(e: React.MouseEvent) => e.stopPropagation()}\r\n        ref={inputRef}\r\n        value={field}\r\n        onKeyPress={onKeyPressed}\r\n        onChange={handleChange}\r\n        variant=\"outline\"\r\n        placeholder=\"Task Name\"\r\n        size=\"sm\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderTaskContent = ({\r\n    dragHandleProps = {},\r\n  }: {\r\n    dragHandleProps?: any;\r\n    draggableProps?: any;\r\n  }) => {\r\n    return (\r\n      <Flex\r\n        //  mb={2}\r\n        justify=\"space-between\"\r\n        direction=\"row\"\r\n      >\r\n        <Flex\r\n          p={2}\r\n          flex={1}\r\n          justify=\"space-between\"\r\n          direction=\"column\"\r\n          wrap=\"nowrap\"\r\n          {...dragHandleProps}\r\n        >\r\n          {isEditing || autoFocus ? (\r\n            renderEdittingInput()\r\n          ) : (\r\n            <Text fontSize=\"sm\" userSelect=\"none\">\r\n              {task?.content}\r\n            </Text>\r\n          )}\r\n          {task?.priority && task?.priority !== \"none\" && (\r\n            <Flex pt={2}>\r\n              <Badge userSelect=\"none\" priority={task.priority}>\r\n                {task.priority}\r\n              </Badge>\r\n            </Flex>\r\n          )}\r\n        </Flex>\r\n        <Flex justify=\"flex-start\" p={2}>\r\n          {renderMenu()}\r\n        </Flex>\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const renderMenu = () => {\r\n    return (\r\n      <Menu closeOnBlur closeOnSelect>\r\n        <MenuButton\r\n          size=\"xs\"\r\n          as={Button}\r\n          onClick={(e: any) => {\r\n            e.stopPropagation();\r\n          }}\r\n          // @ts-ignore\r\n          variant=\"ghost\"\r\n        >\r\n          <Icon name=\"edit\" />\r\n        </MenuButton>\r\n        <MenuList>\r\n          <MenuItem\r\n            onClick={(e: any) => {\r\n              e.stopPropagation();\r\n              setIsEditing(true);\r\n              setField(task?.content || \"\");\r\n            }}\r\n          >\r\n            Rename\r\n          </MenuItem>\r\n          {task?.id && (\r\n            <MenuItem onClick={() => deleteTask({ id: task.id })}>\r\n              Delete\r\n            </MenuItem>\r\n          )}\r\n        </MenuList>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  // if (draggable)\r\n  return (\r\n    <Draggable\r\n      draggableId={task?.id || \"test\"}\r\n      index={index}\r\n      isDragDisabled={!draggable}\r\n    >\r\n      {({ draggableProps, dragHandleProps, innerRef }) => (\r\n        <Flex\r\n          bg={bgColor[colorMode]}\r\n          direction=\"column\"\r\n          // p={2}\r\n          mb={2}\r\n          boxShadow=\"md\"\r\n          rounded=\"md\"\r\n          onClick={() => console.log(\"Open Modal\")}\r\n          {...draggableProps}\r\n          // {...dragHandleProps}\r\n          ref={innerRef}\r\n        >\r\n          {renderTaskContent({\r\n            dragHandleProps,\r\n          })}\r\n        </Flex>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Task);\r\n","import React from \"react\";\r\nimport { PseudoBox, Icon, Text } from \"@chakra-ui/core\";\r\n\r\n// import { Container } from './styles';\r\n\r\nconst AddNewTaskInput: React.FC<{\r\n  onClick: () => void;\r\n}> = ({ onClick }) => {\r\n  return (\r\n    <PseudoBox\r\n      as=\"button\"\r\n      display=\"flex\"\r\n      width=\"100%\"\r\n      flexDirection=\"row\"\r\n      p={2}\r\n      mb={2}\r\n      boxShadow=\"xs\"\r\n      rounded=\"md\"\r\n      cursor=\"pointer\"\r\n      alignItems=\"center\"\r\n      _hover={{\r\n        opacity: 0.5,\r\n      }}\r\n      opacity={8 / 10}\r\n      onClick={onClick}\r\n    >\r\n      <Icon name=\"add\" size=\"10px\" />\r\n      <Text fontSize=\"sm\" pl={2}>\r\n        Add New Task\r\n      </Text>\r\n    </PseudoBox>\r\n    // </Button>\r\n  );\r\n};\r\n\r\nexport default AddNewTaskInput;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport Task from \"../Task\";\r\n\r\nimport {\r\n  Box,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  Icon,\r\n  Input,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n} from \"@chakra-ui/core\";\r\nimport {\r\n  TasksByStatus,\r\n  Status,\r\n  Task as ITask,\r\n  TaskWithStatus,\r\n} from \"models/tasks\";\r\nimport AddNewTaskInput from \"components/AddNewTaskInput\";\r\nimport useEditField from \"components/hooks/useEditField\";\r\n\r\ninterface Props {\r\n  column?: TasksByStatus;\r\n  createStatus: (status: Partial<Status>) => void;\r\n  editStatus: (status: Partial<Status>) => void;\r\n  createTask: (task: Partial<TaskWithStatus>) => void;\r\n  deleteTask: ({ id }: { id: string }) => void;\r\n  editTask: (task: Partial<ITask>) => void;\r\n}\r\n\r\nconst Column: React.FC<Props> = ({\r\n  column,\r\n  createStatus,\r\n  editStatus,\r\n  createTask,\r\n  deleteTask,\r\n  editTask,\r\n}) => {\r\n  const tasks = column?.tasks;\r\n  const {\r\n    field: statusTitle,\r\n    isEditing: isEditingGroup,\r\n    setIsEditing: setIsEditingGroup,\r\n    setField: setStatusTitle,\r\n    inputRef,\r\n    handleBlur,\r\n    handleChange,\r\n    onKeyPressed,\r\n  } = useEditField({\r\n    fieldId: column?.id,\r\n    onCreate: (field) => createStatus({ title: field }),\r\n    onEdit: (id, field) => editStatus({ id: id, title: field }),\r\n  });\r\n\r\n  const [isAddingNewTask, setIsAddingNewTask] = useState(false);\r\n\r\n  const renderMenu = () => {\r\n    return (\r\n      <Menu closeOnBlur closeOnSelect>\r\n        <MenuButton\r\n          as={Button}\r\n          size=\"sm\"\r\n          // @ts-ignore\r\n          variant=\"ghost\"\r\n        >\r\n          <Icon name=\"chevron-down\" />\r\n        </MenuButton>\r\n        <MenuList>\r\n          <MenuItem\r\n            onClick={() => {\r\n              setIsEditingGroup(true);\r\n              setStatusTitle(column?.title || \"\");\r\n            }}\r\n          >\r\n            Edit Status Name\r\n          </MenuItem>\r\n          <MenuItem>Remove Status</MenuItem>\r\n        </MenuList>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  const renderEdittingInput = () => {\r\n    return (\r\n      <Input\r\n        onBlur={handleBlur}\r\n        ref={inputRef}\r\n        value={statusTitle}\r\n        onKeyPress={onKeyPressed}\r\n        onChange={handleChange}\r\n        variant=\"unstyled\"\r\n        placeholder=\"Status name\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderEmptyColumnHeader = () => {\r\n    return (\r\n      <Flex mb={4} px={2} justify=\"space-between\" align=\"center\">\r\n        {isEditingGroup ? (\r\n          renderEdittingInput()\r\n        ) : (\r\n          <Button\r\n            onClick={() => setIsEditingGroup(true)}\r\n            leftIcon=\"add\"\r\n            size=\"sm\"\r\n            bg=\"transparent\"\r\n          >\r\n            Add a group\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const renderHeader = (columnObj: TasksByStatus) => {\r\n    return (\r\n      <Flex mb={4} px={2} justify=\"space-between\" align=\"center\">\r\n        {isEditingGroup ? (\r\n          renderEdittingInput()\r\n        ) : (\r\n          <Text fontSize=\"md\" fontWeight=\"bold\">\r\n            {columnObj.title}\r\n          </Text>\r\n        )}\r\n\r\n        {renderMenu()}\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const renderTaskList = (columnObj: TasksByStatus) => {\r\n    return (\r\n      <Droppable droppableId={columnObj.id}>\r\n        {({ droppableProps, innerRef, placeholder }) => (\r\n          <Box minH={200} ref={innerRef} {...droppableProps}>\r\n            {column &&\r\n              tasks &&\r\n              tasks.map((task, index) => (\r\n                <Task\r\n                  statusId={column.id}\r\n                  createTask={createTask}\r\n                  deleteTask={deleteTask}\r\n                  editTask={editTask}\r\n                  key={task?.id}\r\n                  task={task}\r\n                  index={index}\r\n                />\r\n              ))}\r\n            {column && isAddingNewTask && (\r\n              <Task\r\n                statusId={column.id}\r\n                createTask={(args) => {\r\n                  createTask(args);\r\n                  setIsAddingNewTask(false);\r\n                }}\r\n                deleteTask={deleteTask}\r\n                editTask={editTask}\r\n                draggable={false}\r\n                autoFocus\r\n                key={`${column.id}/taks-${tasks?.length || 0}`}\r\n                // task={}\r\n                index={tasks?.length || 0}\r\n              />\r\n            )}\r\n            {placeholder}\r\n\r\n            {column && !isAddingNewTask && (\r\n              <AddNewTaskInput\r\n                key={`${column.id}`}\r\n                onClick={() => setIsAddingNewTask(true)}\r\n              />\r\n            )}\r\n          </Box>\r\n        )}\r\n      </Droppable>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box minH=\"60vh\" minW={200} w={{ base: \"100%\", sm: \"50%\", md: 300 }} p={3}>\r\n      {column ? renderHeader(column) : renderEmptyColumnHeader()}\r\n      {column && tasks && renderTaskList(column)}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import React from \"react\";\r\nimport { Flex, Text, Box, Button, Icon, useColorMode } from \"@chakra-ui/core\";\r\n\r\nfunction Navbar() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Flex\r\n      w=\"100%\"\r\n      h={50}\r\n      justify=\"space-between\"\r\n      align=\"center\"\r\n      px={8}\r\n      py={4}\r\n      borderBottomWidth=\"1px\"\r\n    >\r\n      <Box flex={2}>\r\n        <Text fontWeight=\"bold\">Kaban Board</Text>\r\n      </Box>\r\n      <Flex flex={1} justify=\"flex-end\">\r\n        <Button size=\"sm\" onClick={toggleColorMode} variant=\"ghost\">\r\n          <Icon name={colorMode === \"light\" ? \"moon\" : \"sun\"} />\r\n        </Button>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import { action, Action, computed, Computed, thunk, Thunk } from \"easy-peasy\";\r\nimport { DropResult } from \"react-beautiful-dnd\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport * as _ from \"lodash\";\r\n\r\ntype Priority = \"high\" | \"medium\" | \"low\" | \"none\";\r\n\r\nexport interface Task {\r\n  id: string;\r\n  content: string;\r\n  priority: Priority;\r\n}\r\n\r\nexport interface TaskWithStatus {\r\n  id: string;\r\n  content: string;\r\n  priority: Priority;\r\n  statusId: string;\r\n}\r\n\r\nexport interface Status {\r\n  id: string;\r\n  title: string;\r\n  tasks: string[];\r\n}\r\n\r\nexport interface TasksByStatus {\r\n  id: string;\r\n  title: string;\r\n  tasks: Task[];\r\n}\r\n\r\nexport interface TasksData {\r\n  byId: {\r\n    [key: string]: Task;\r\n  };\r\n  allIds: string[];\r\n}\r\n\r\nexport interface StatusData {\r\n  byId: {\r\n    [key: string]: Status;\r\n  };\r\n  allIds: string[];\r\n}\r\nexport interface Data {\r\n  tasks: TasksData;\r\n  status: StatusData;\r\n}\r\n\r\nexport interface TasksModel {\r\n  data: Data;\r\n  tasksByStatus: Computed<TasksModel, TasksByStatus[]>;\r\n  setStatus: Action<TasksModel, StatusData>;\r\n  createStatus: Action<TasksModel, Partial<Status>>;\r\n  editStatus: Action<TasksModel, Partial<Status>>;\r\n  setTasks: Action<TasksModel, TasksData>;\r\n  createTask: Action<TasksModel, Partial<TaskWithStatus>>;\r\n  deleteTask: Thunk<TasksModel, { id: string }>;\r\n  editTask: Action<TasksModel, Partial<Task>>;\r\n  moveTask: Thunk<TasksModel, DropResult>;\r\n}\r\n\r\nconst INITIAL_STATE: Data = {\r\n  tasks: {\r\n    byId: {\r\n      \"task-1\": {\r\n        id: \"task-1\",\r\n        content: \"Wash the dishes\",\r\n        priority: \"low\" as Priority,\r\n      },\r\n      \"task-2\": {\r\n        id: \"task-2\",\r\n        content: \"Procratinate\",\r\n        priority: \"high\" as Priority,\r\n      },\r\n      \"task-3\": {\r\n        id: \"task-3\",\r\n        content: \"Do some actual work\",\r\n        priority: \"medium\" as Priority,\r\n      },\r\n      \"task-4\": {\r\n        id: \"task-4\",\r\n        content: \"Sleep, please! 😢😢😢😢\",\r\n        priority: \"low\" as Priority,\r\n      },\r\n      \"task-5\": {\r\n        id: \"task-5\",\r\n        content: \"Stay awake at all costs!\",\r\n        priority: \"high\" as Priority,\r\n      },\r\n    },\r\n    allIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\", \"task-5\"],\r\n  },\r\n  status: {\r\n    byId: {\r\n      \"column-1\": {\r\n        id: \"column-1\",\r\n        title: \"To Do\",\r\n        tasks: [\"task-1\", \"task-2\"],\r\n      },\r\n      \"column-2\": {\r\n        id: \"column-2\",\r\n        title: \"Doing\",\r\n        tasks: [\"task-3\", \"task-4\", \"task-5\"],\r\n      },\r\n    },\r\n    allIds: [\"column-1\", \"column-2\"],\r\n  },\r\n};\r\n\r\nexport const tasksModel: TasksModel = {\r\n  data: INITIAL_STATE,\r\n  tasksByStatus: computed((state) => {\r\n    const { tasks, status } = state.data;\r\n    const statusValues = status.allIds.map((id) => status.byId[id]);\r\n    const resolveTask = (taskId: string) => tasks.byId[taskId];\r\n    const mapTasks = (taskAllIds: string[]) => taskAllIds.map(resolveTask);\r\n    return statusValues.map((status: Status) => ({\r\n      ...status,\r\n      tasks: mapTasks(status.tasks),\r\n    }));\r\n  }),\r\n\r\n  setStatus: action((state, payload) => {\r\n    state.data.status = payload;\r\n  }),\r\n  setTasks: action((state, payload) => {\r\n    state.data.tasks = payload;\r\n  }),\r\n  createStatus: action((state, payload) => {\r\n    const uuid = uuidv4();\r\n    state.data.status = {\r\n      byId: {\r\n        ...state.data.status.byId,\r\n        [uuid]: {\r\n          id: uuid,\r\n          title: payload.title || \"New Column\",\r\n          tasks: [],\r\n        },\r\n      },\r\n      allIds: [...state.data.status.allIds, uuid],\r\n    };\r\n  }),\r\n  editStatus: action((state, payload) => {\r\n    if (payload?.id) {\r\n      state.data.status = {\r\n        byId: {\r\n          ...state.data.status.byId,\r\n          [payload.id]: {\r\n            ...state.data.status.byId[payload.id],\r\n            title: payload.title || state.data.status.byId[payload.id].title,\r\n          },\r\n        },\r\n        allIds: [...state.data.status.allIds],\r\n      };\r\n    } else return state;\r\n  }),\r\n  createTask: action((state, payload) => {\r\n    const uuid = uuidv4();\r\n    if (payload.statusId) {\r\n      state.data.tasks = {\r\n        byId: {\r\n          ...state.data.tasks.byId,\r\n          [uuid]: {\r\n            id: uuid,\r\n            content: payload?.content || \"New Task\",\r\n            priority: \"none\",\r\n          },\r\n        },\r\n        allIds: [...state.data.tasks.allIds, uuid],\r\n      };\r\n      state.data.status = {\r\n        ...state.data.status,\r\n        byId: {\r\n          ...state.data.status.byId,\r\n          [payload.statusId]: {\r\n            ...state.data.status.byId[payload.statusId],\r\n            tasks: [...state.data.status.byId[payload.statusId].tasks, uuid],\r\n          },\r\n        },\r\n      };\r\n    }\r\n  }),\r\n  editTask: action((state, payload) => {\r\n    if (payload?.id) {\r\n      state.data.tasks = {\r\n        byId: {\r\n          ...state.data.tasks.byId,\r\n          [payload.id]: {\r\n            ...state.data.tasks.byId[payload.id],\r\n            content:\r\n              payload.content || state.data.tasks.byId[payload.id].content,\r\n          },\r\n        },\r\n        allIds: [...state.data.tasks.allIds],\r\n      };\r\n    } else return state;\r\n  }),\r\n  deleteTask: thunk((actions, payload, { getState }) => {\r\n    const tasks = getState().data.tasks;\r\n    const status = getState().data.status;\r\n    const removedTaskById = (id: string, objTasks: TasksData): TasksData => {\r\n      const { [id]: removed, ...byId } = objTasks.byId;\r\n      const allIds = _.without(objTasks.allIds, payload.id);\r\n      return {\r\n        ...objTasks,\r\n        byId,\r\n        allIds,\r\n      };\r\n    };\r\n    const removedTasksFromStatus = (\r\n      id: string,\r\n      objStatus: StatusData\r\n    ): StatusData => {\r\n      const byId = _.mapValues(objStatus.byId, (stat) => {\r\n        return {\r\n          ...stat,\r\n          tasks: _.without(stat.tasks, id),\r\n        };\r\n      });\r\n      return {\r\n        ...objStatus,\r\n        byId,\r\n      };\r\n    };\r\n\r\n    actions.setTasks(removedTaskById(payload.id, tasks));\r\n    actions.setStatus(removedTasksFromStatus(payload.id, status));\r\n  }),\r\n\r\n  moveTask: thunk((actions, payload, { getState }) => {\r\n    const { destination, source, draggableId } = payload;\r\n    if (\r\n      !destination ||\r\n      (destination.droppableId === source.droppableId &&\r\n        destination.index === source.index)\r\n    ) {\r\n      return;\r\n    }\r\n    const sourceColumn = getState().data.status.byId[source.droppableId];\r\n    const destinationColumn = getState().data.status.byId[\r\n      destination.droppableId\r\n    ];\r\n    const sourceTaskIds = [...sourceColumn.tasks];\r\n    const destinationTaskIds = [...destinationColumn.tasks];\r\n\r\n    if (destination.droppableId === source.droppableId) {\r\n      sourceTaskIds.splice(source.index, 1);\r\n      sourceTaskIds.splice(destination.index, 0, draggableId);\r\n      actions.setStatus({\r\n        ...getState().data.status,\r\n        byId: {\r\n          ...getState().data.status.byId,\r\n          [source.droppableId]: {\r\n            ...sourceColumn,\r\n            tasks: sourceTaskIds,\r\n          },\r\n        },\r\n      });\r\n    } else {\r\n      sourceTaskIds.splice(source.index, 1);\r\n      destinationTaskIds.splice(destination.index, 0, draggableId);\r\n      actions.setStatus({\r\n        ...getState().data.status,\r\n        byId: {\r\n          ...getState().data.status.byId,\r\n          [source.droppableId]: {\r\n            ...sourceColumn,\r\n            tasks: sourceTaskIds,\r\n          },\r\n          [destination.droppableId]: {\r\n            ...destinationColumn,\r\n            tasks: destinationTaskIds,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }),\r\n};\r\n","import { createStore, createTypedHooks } from \"easy-peasy\";\r\nimport { tasksModel, TasksModel } from \"./tasks\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\ninterface StoreModel {\r\n  tasks: TasksModel;\r\n}\r\n\r\nconst storeModel: StoreModel = {\r\n  tasks: tasksModel,\r\n};\r\n\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage: storage,\r\n};\r\nexport const store = createStore(storeModel, {\r\n  reducerEnhancer: (reducer) => persistReducer(persistConfig, reducer),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Column from \"components/Column\";\r\nimport { Flex } from \"@chakra-ui/core\";\r\nimport Navbar from \"components/Navbar\";\r\nimport { useStoreState, useStoreActions } from \"models\";\r\n\r\nfunction Kaban() {\r\n  const tasksByStatus = useStoreState((state) => state.tasks.tasksByStatus);\r\n  const moveTask = useStoreActions((actions) => actions.tasks.moveTask);\r\n  const createStatus = useStoreActions((actions) => actions.tasks.createStatus);\r\n  const editStatus = useStoreActions((actions) => actions.tasks.editStatus);\r\n  const editTask = useStoreActions((actions) => actions.tasks.editTask);\r\n  const createTask = useStoreActions((actions) => actions.tasks.createTask);\r\n  const deleteTask = useStoreActions((actions) => actions.tasks.deleteTask);\r\n\r\n  return (\r\n    <Flex h=\"100%\" direction=\"column\">\r\n      <Navbar />\r\n      <Flex flex={1} mt={15} wrap=\"nowrap\" overflowX=\"scroll\">\r\n        <DragDropContext onDragEnd={moveTask}>\r\n          {tasksByStatus.map((status) => {\r\n            const column = status;\r\n            return (\r\n              <Column\r\n                key={column.id}\r\n                column={column}\r\n                createStatus={createStatus}\r\n                editStatus={editStatus}\r\n                editTask={editTask}\r\n                createTask={createTask}\r\n                deleteTask={deleteTask}\r\n              />\r\n            );\r\n          })}\r\n          <Column\r\n            key=\"new-column\"\r\n            createStatus={createStatus}\r\n            editStatus={editStatus}\r\n            editTask={editTask}\r\n            createTask={createTask}\r\n            deleteTask={deleteTask}\r\n          />\r\n        </DragDropContext>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Kaban;\r\n","import React from \"react\";\r\nimport { ThemeProvider } from \"@chakra-ui/core\";\r\nimport { CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\r\nimport Kaban from \"pages/Kaban\";\r\n\r\nimport { store, persistor } from \"models\";\r\nimport { StoreProvider } from \"easy-peasy\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <StoreProvider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <ThemeProvider>\r\n          <ColorModeProvider>\r\n            <CSSReset />\r\n            <Kaban />\r\n          </ColorModeProvider>\r\n        </ThemeProvider>\r\n      </PersistGate>\r\n    </StoreProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}