{"version":3,"sources":["initial-data.js","components/Column/styles.js","components/Task/styles.js","components/Task/index.js","components/Column/index.js","components/Navbar/index.js","App.js","index.js"],"names":["initialData","tasks","id","content","priority","columns","title","taskIds","columnOrder","styled","div","h3","selectBadgeColor","high","medium","low","Badge","TBadge","attrs","props","variantColor","rounded","fontSize","p","variant","Task","task","index","console","log","draggableId","draggableProps","dragHandleProps","innerRef","PseudoBox","_hover","bg","Flex","direction","mb","boxShadow","ref","Text","justify","Column","column","Box","minH","minW","w","base","sm","md","fontWeight","droppableId","droppableProps","placeholder","map","key","Navbar","useColorMode","colorMode","toggleColorMode","h","align","px","py","borderWidth","flex","Button","onClick","Icon","name","breakpoints","lg","xl","newTheme","theme","App","useState","setColumns","ThemeProvider","ColorModeProvider","CSSReset","mt","wrap","overflowWrap","onDragEnd","result","destination","source","sourceColumn","destinationColumn","sourceTaskIds","destinationTaskIds","splice","columnId","taskList","taskId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c61e89c.chunk.js","sourcesContent":["const initialData = {\r\n  tasks: {\r\n    \"task-1\": { id: \"task-1\", content: \"Wash the dishes\", priority: \"low\" },\r\n    \"task-2\": { id: \"task-2\", content: \"Procratinate\", priority: \"high\" },\r\n    \"task-3\": {\r\n      id: \"task-3\",\r\n      content: \"Do some actual work\",\r\n      priority: \"medium\",\r\n    },\r\n    \"task-4\": {\r\n      id: \"task-4\",\r\n      content: \"Sleep, please! ðŸ˜¢ðŸ˜¢ðŸ˜¢ðŸ˜¢\",\r\n      priority: \"low\",\r\n    },\r\n    \"task-5\": {\r\n      id: \"task-5\",\r\n      content: \"Stay awake at all costs!\",\r\n      priority: \"high\",\r\n    },\r\n  },\r\n  columns: {\r\n    \"column-1\": {\r\n      id: \"column-1\",\r\n      title: \"To Do\",\r\n      taskIds: [\"task-1\", \"task-2\"],\r\n    },\r\n    \"column-2\": {\r\n      id: \"column-2\",\r\n      title: \"Doing\",\r\n      taskIds: [\"task-3\", \"task-4\", \"task-5\"],\r\n    },\r\n  },\r\n  columnOrder: [\"column-1\", \"column-2\"],\r\n};\r\nexport default initialData;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  margin: 8px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 2px;\r\n  min-width: 300px;\r\n  background-color: #f9f9f9;\r\n`;\r\n\r\nexport const Title = styled.h3`\r\n  padding: 8px;\r\n`;\r\nexport const TaskList = styled.div`\r\n  padding: 8px;\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { Badge as TBadge } from \"@chakra-ui/core\";\r\n\r\nexport const Container = styled.div`\r\n  border: 1px solid lightgrey;\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\n// const selectBadgeColor = (priority) => {\r\n//   return (\r\n//     {\r\n//       high: \"#fa9191\",\r\n//       medium: \"#6886c5\",\r\n//       low: \"#58b4ae\",\r\n//     }[priority] || \"#6886c5\"\r\n//   );\r\n// };\r\nconst selectBadgeColor = (priority) => {\r\n  return (\r\n    {\r\n      high: \"red\",\r\n      medium: \"blue\",\r\n      low: \"green\",\r\n    }[priority] || \"blue\"\r\n  );\r\n};\r\n\r\nexport const Badge = styled(TBadge).attrs((props) => ({\r\n  variantColor: selectBadgeColor(props.priority),\r\n  rounded: \"md\",\r\n  fontSize: \"10px\",\r\n  p: \"5px\",\r\n  variant: \"subtle\",\r\n}))`\r\n  /* background-color: ${(props) => selectBadgeColor(props.priority)}; */\r\n  /* width: 30px; */\r\n  /* border-radius: 5px;\r\n  padding: 5px;\r\n  font-size: 10px;\r\n  color: white; */\r\n  /* display: inline-flex; */\r\n  /* justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-end; */\r\n`;\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { Container, Badge } from \"./styles\";\r\nimport { Text, Box, Flex, PseudoBox } from \"@chakra-ui/core\";\r\n\r\nfunction Task({ task, index }) {\r\n  console.log(index, task.id);\r\n  return (\r\n    <Draggable draggableId={task.id} index={index}>\r\n      {({ draggableProps, dragHandleProps, innerRef }) => (\r\n        <PseudoBox _hover={{ bg: \"blue\" }}>\r\n          <Flex\r\n            direction=\"column\"\r\n            p={2}\r\n            mb={2}\r\n            boxShadow=\"md\"\r\n            rounded\r\n            {...draggableProps}\r\n            {...dragHandleProps}\r\n            ref={innerRef}\r\n          >\r\n            <Text fontSize=\"sm\">{task?.content}</Text>\r\n            <Flex justify=\"flex-end\">\r\n              <Badge priority={task.priority}>{task.priority}</Badge>\r\n            </Flex>\r\n          </Flex>\r\n        </PseudoBox>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\n\r\nimport { Container, TaskList, Title } from \"./styles\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport Task from \"../Task\";\r\n\r\nimport { Box, Text } from \"@chakra-ui/core\";\r\n\r\nfunction Column({ column, tasks }) {\r\n  return (\r\n    <Box\r\n      // bg=\"gray.50\"\r\n      minH=\"60vh\"\r\n      minW={200}\r\n      w={{ base: \"100%\", sm: \"50%\", md: 300 }}\r\n      // borderWidth=\"1px\"\r\n      // rounded=\"lg\"\r\n      // mx={15}\r\n      p={3}\r\n      // style={{ backgroundColor: \"red\" }}\r\n    >\r\n      <Box>\r\n        <Text mb={2} fontSize=\"md\" fontWeight=\"bold\">\r\n          {column.title}\r\n        </Text>\r\n      </Box>\r\n      <Droppable droppableId={column.id}>\r\n        {({ droppableProps, innerRef, placeholder }) => (\r\n          <Box ref={innerRef} {...droppableProps}>\r\n            {tasks?.map((task, index) => (\r\n              <Task key={task.id} task={task} index={index} />\r\n            ))}\r\n            {placeholder}\r\n          </Box>\r\n        )}\r\n      </Droppable>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Column;\r\n","import React from \"react\";\r\nimport { Flex, Text, Box, Button, Icon, useColorMode } from \"@chakra-ui/core\";\r\n\r\nfunction Navbar() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Flex\r\n      w=\"100%\"\r\n      h={50}\r\n      justify=\"space-between\"\r\n      align=\"center\"\r\n      px={8}\r\n      py={4}\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box flex={1}>\r\n        <Text fontWeight=\"bold\">Kaban Board</Text>\r\n      </Box>\r\n      <Flex flex={1} justify=\"flex-end\">\r\n        <Button onClick={toggleColorMode}>\r\n          <Icon name={colorMode === \"light\" ? \"moon\" : \"sun\"} />\r\n        </Button>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"./components/Column\";\nimport { ThemeProvider, theme, Box } from \"@chakra-ui/core\";\nimport { Flex, CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\nimport Navbar from \"./components/Navbar\";\n\nconst breakpoints = [\"360px\", \"768px\", \"1024px\", \"1440px\"];\nbreakpoints.sm = breakpoints[0];\nbreakpoints.md = breakpoints[1];\nbreakpoints.lg = breakpoints[2];\nbreakpoints.xl = breakpoints[3];\n\nconst newTheme = {\n  ...theme,\n  breakpoints,\n};\n\nfunction App() {\n  const [tasks, setTasks] = useState(initialData.tasks);\n  const [columns, setColumns] = useState(initialData.columns);\n  const [columnOrder, setColumnOrder] = useState(initialData.columnOrder);\n\n  const onDragEnd = (result) => {\n    // TODO\n    const { destination, source, draggableId } = result;\n    if (\n      !destination ||\n      (destination.droppableId === source.droppableId &&\n        destination.index === source.index)\n    ) {\n      return;\n    }\n\n    const sourceColumn = columns[source.droppableId];\n    const destinationColumn = columns[destination.droppableId];\n    const sourceTaskIds = [...sourceColumn.taskIds];\n    const destinationTaskIds = [...destinationColumn.taskIds];\n\n    if (destination.droppableId === source.droppableId) {\n      sourceTaskIds.splice(source.index, 1);\n      sourceTaskIds.splice(destination.index, 0, draggableId);\n\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...sourceColumn,\n          taskIds: sourceTaskIds,\n        },\n      });\n    } else {\n      sourceTaskIds.splice(source.index, 1);\n      destinationTaskIds.splice(destination.index, 0, draggableId);\n\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...sourceColumn,\n          taskIds: sourceTaskIds,\n        },\n        [destination.droppableId]: {\n          ...destinationColumn,\n          taskIds: destinationTaskIds,\n        },\n      });\n    }\n  };\n\n  return (\n    <ThemeProvider theme={newTheme}>\n      <ColorModeProvider>\n        <CSSReset />\n        <Box>\n          <Navbar />\n          <Flex mt={15} wrap={false} overflowWrap=\"scroll\">\n            <DragDropContext\n              // onDragStart\n              // onDragUpdate\n              onDragEnd={onDragEnd}\n            >\n              {columnOrder.map((columnId) => {\n                const column = columns?.[columnId];\n                const taskList = column.taskIds.map((taskId) => tasks[taskId]);\n                return (\n                  <Column key={column.id} column={column} tasks={taskList} />\n                );\n              })}\n            </DragDropContext>\n          </Flex>\n        </Box>\n      </ColorModeProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"@atlaskit/css-reset\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}