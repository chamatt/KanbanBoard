{"version":3,"sources":["components/Task/styles.js","components/Task/index.tsx","components/Column/index.tsx","components/Navbar/index.js","models/tasks.ts","models/index.ts","pages/Kaban/index.tsx","App.tsx","index.tsx"],"names":["styled","div","selectBadgeColor","priority","high","medium","low","Badge","TBadge","attrs","props","variantColor","rounded","fontSize","p","variant","Task","task","index","colorMode","useColorMode","bgColor","light","dark","draggableId","id","draggableProps","dragHandleProps","innerRef","Flex","bg","direction","mb","boxShadow","ref","Text","content","justify","Column","column","createStatus","editStatus","tasks","useState","statusTitle","setStatusTitle","isEditingGroup","setIsEditingGroup","inputRef","useRef","useEffect","current","focus","columnObj","handleCreateStatus","length","title","handleEditStatus","handleBlur","onKeyPressed","event","key","renderEdittingInput","Input","onBlur","value","onKeyPress","onChange","e","target","placeholder","Box","minH","minW","w","base","sm","md","px","align","fontWeight","Menu","closeOnBlur","closeOnSelect","as","Button","size","Icon","name","onClick","leftIcon","droppableId","droppableProps","map","renderTaskList","Navbar","toggleColorMode","h","py","borderBottomWidth","flex","tasksModel","data","byId","allIds","status","tasksByStatus","computed","state","statusValues","console","log","resolveTask","taskId","taskAllIds","setStatus","action","payload","uuid","uuidv4","moveTask","thunk","actions","getState","destination","source","sourceColumn","destinationColumn","sourceTaskIds","destinationTaskIds","splice","storeModel","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","persistConfig","storage","store","createStore","reducerEnhancer","reducer","persistReducer","persistor","persistStore","Kaban","mt","wrap","overflowX","onDragEnd","App","ThemeProvider","ColorModeProvider","CSSReset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11f0193c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { Badge as TBadge } from \"@chakra-ui/core\";\r\n\r\nexport const Container = styled.div`\r\n  border: 1px solid lightgrey;\r\n  border-radius: 2px;\r\n  padding: 8px;\r\n  margin-bottom: 8px;\r\n  background-color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\n// const selectBadgeColor = (priority) => {\r\n//   return (\r\n//     {\r\n//       high: \"#fa9191\",\r\n//       medium: \"#6886c5\",\r\n//       low: \"#58b4ae\",\r\n//     }[priority] || \"#6886c5\"\r\n//   );\r\n// };\r\nconst selectBadgeColor = (priority) => {\r\n  return (\r\n    {\r\n      high: \"red\",\r\n      medium: \"blue\",\r\n      low: \"green\",\r\n    }[priority] || \"blue\"\r\n  );\r\n};\r\n\r\nexport const Badge = styled(TBadge).attrs((props) => ({\r\n  variantColor: selectBadgeColor(props.priority),\r\n  rounded: \"md\",\r\n  fontSize: \"10px\",\r\n  p: \"5px\",\r\n  variant: \"subtle\",\r\n}))`\r\n  /* background-color: ${(props) => selectBadgeColor(props.priority)}; */\r\n  /* width: 30px; */\r\n  /* border-radius: 5px;\r\n  padding: 5px;\r\n  font-size: 10px;\r\n  color: white; */\r\n  /* display: inline-flex; */\r\n  /* justify-content: center;\r\n  align-items: center;\r\n  align-self: flex-end; */\r\n`;\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { Badge } from \"./styles\";\r\nimport { Text, Flex, useColorMode } from \"@chakra-ui/core\";\r\n\r\ninterface Props {\r\n  task: any;\r\n  index: number;\r\n}\r\n\r\nconst Task = (props: Props) => {\r\n  const { task, index } = props;\r\n  const { colorMode } = useColorMode();\r\n  const bgColor: any = { light: \"whiteAlpha.900\", dark: \"gray.800\" };\r\n  return (\r\n    <Draggable draggableId={task.id} index={index}>\r\n      {({ draggableProps, dragHandleProps, innerRef }) => (\r\n        <Flex\r\n          bg={bgColor[colorMode]}\r\n          direction=\"column\"\r\n          p={2}\r\n          mb={2}\r\n          boxShadow=\"md\"\r\n          rounded=\"md\"\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n          ref={innerRef}\r\n        >\r\n          <Text fontSize=\"sm\">{task?.content}</Text>\r\n          <Flex justify=\"flex-end\">\r\n            <Badge priority={task.priority}>{task.priority}</Badge>\r\n          </Flex>\r\n        </Flex>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React, {\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  ChangeEvent,\r\n  KeyboardEvent,\r\n} from \"react\";\r\n\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport Task from \"../Task\";\r\n\r\nimport {\r\n  Box,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  Icon,\r\n  Input,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n} from \"@chakra-ui/core\";\r\nimport { TasksByStatus, Status } from \"models/tasks\";\r\n\r\ninterface Props {\r\n  column?: TasksByStatus;\r\n  createStatus: (status: Partial<Status>) => void;\r\n  editStatus: (status: Partial<Status>) => void;\r\n}\r\n\r\nconst Column: React.FC<Props> = ({ column, createStatus, editStatus }) => {\r\n  const tasks = column?.tasks;\r\n\r\n  const [statusTitle, setStatusTitle] = useState(\"\");\r\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (isEditingGroup) inputRef?.current?.focus();\r\n  }, [isEditingGroup]);\r\n\r\n  const handleCreateStatus = () => {\r\n    if (statusTitle.length > 0) {\r\n      createStatus({\r\n        title: statusTitle,\r\n        tasks: [],\r\n      });\r\n      setIsEditingGroup(false);\r\n      setStatusTitle(\"\");\r\n    } else {\r\n      setIsEditingGroup(false);\r\n    }\r\n  };\r\n\r\n  const handleEditStatus = () => {\r\n    if (column && statusTitle.length > 0) {\r\n      editStatus({\r\n        id: column.id,\r\n        title: statusTitle,\r\n      });\r\n      setIsEditingGroup(false);\r\n      setStatusTitle(\"\");\r\n    } else {\r\n      setIsEditingGroup(false);\r\n    }\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (column?.id) handleEditStatus();\r\n    else handleCreateStatus();\r\n  };\r\n\r\n  const onKeyPressed = (event: KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n      if (column?.id) handleEditStatus();\r\n      else handleCreateStatus();\r\n    }\r\n  };\r\n\r\n  const renderMenu = () => {\r\n    return (\r\n      <Menu closeOnBlur closeOnSelect>\r\n        <MenuButton\r\n          as={Button}\r\n          size=\"sm\"\r\n          // @ts-ignore\r\n          variant=\"ghost\"\r\n        >\r\n          <Icon name=\"chevron-down\" />\r\n        </MenuButton>\r\n        <MenuList>\r\n          <MenuItem\r\n            onClick={() => {\r\n              setIsEditingGroup(true);\r\n              setStatusTitle(column?.title || \"\");\r\n            }}\r\n          >\r\n            Edit Status Name\r\n          </MenuItem>\r\n          <MenuItem>Remove Status</MenuItem>\r\n        </MenuList>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  const renderEdittingInput = () => {\r\n    return (\r\n      <Input\r\n        onBlur={handleBlur}\r\n        ref={inputRef}\r\n        value={statusTitle}\r\n        onKeyPress={onKeyPressed}\r\n        onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n          setStatusTitle(e.target.value)\r\n        }\r\n        variant=\"unstyled\"\r\n        placeholder=\"Status name\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const renderEmptyColumnHeader = () => {\r\n    return (\r\n      <Flex mb={4} px={2} justify=\"space-between\" align=\"center\">\r\n        {isEditingGroup ? (\r\n          renderEdittingInput()\r\n        ) : (\r\n          <Button\r\n            onClick={() => setIsEditingGroup(true)}\r\n            leftIcon=\"add\"\r\n            size=\"sm\"\r\n            bg=\"transparent\"\r\n          >\r\n            Add a group\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const renderHeader = (columnObj: TasksByStatus) => {\r\n    return (\r\n      <Flex mb={4} px={2} justify=\"space-between\" align=\"center\">\r\n        {isEditingGroup ? (\r\n          renderEdittingInput()\r\n        ) : (\r\n          <Text fontSize=\"md\" fontWeight=\"bold\">\r\n            {columnObj.title}\r\n          </Text>\r\n        )}\r\n\r\n        {renderMenu()}\r\n      </Flex>\r\n    );\r\n  };\r\n\r\n  const renderTaskList = (columnObj: TasksByStatus) => {\r\n    return (\r\n      <Droppable droppableId={columnObj.id}>\r\n        {({ droppableProps, innerRef, placeholder }) => (\r\n          <Box minH={200} ref={innerRef} {...droppableProps}>\r\n            {tasks?.map((task, index) => (\r\n              <Task key={task.id} task={task} index={index} />\r\n            ))}\r\n            {placeholder}\r\n          </Box>\r\n        )}\r\n      </Droppable>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Box minH=\"60vh\" minW={200} w={{ base: \"100%\", sm: \"50%\", md: 300 }} p={3}>\r\n      {column ? renderHeader(column) : renderEmptyColumnHeader()}\r\n      {column && tasks && renderTaskList(column)}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import React from \"react\";\r\nimport { Flex, Text, Box, Button, Icon, useColorMode } from \"@chakra-ui/core\";\r\n\r\nfunction Navbar() {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  return (\r\n    <Flex\r\n      w=\"100%\"\r\n      h={50}\r\n      justify=\"space-between\"\r\n      align=\"center\"\r\n      px={8}\r\n      py={4}\r\n      borderBottomWidth=\"1px\"\r\n    >\r\n      <Box flex={2}>\r\n        <Text fontWeight=\"bold\">Kaban Board</Text>\r\n      </Box>\r\n      <Flex flex={1} justify=\"flex-end\">\r\n        <Button size=\"sm\" onClick={toggleColorMode} variant=\"ghost\">\r\n          <Icon name={colorMode === \"light\" ? \"moon\" : \"sun\"} />\r\n        </Button>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import { action, Action, computed, Computed, thunk, Thunk } from \"easy-peasy\";\r\nimport { DropResult } from \"react-beautiful-dnd\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\ntype Priority = \"high\" | \"medium\" | \"low\";\r\n\r\nexport interface Task {\r\n  id: string;\r\n  content: string;\r\n  priority: Priority;\r\n}\r\n\r\nexport interface Status {\r\n  id: string;\r\n  title: string;\r\n  tasks: string[];\r\n}\r\n\r\nexport interface TasksByStatus {\r\n  id: string;\r\n  title: string;\r\n  tasks: Task[];\r\n}\r\n\r\nexport interface TasksData {\r\n  byId: {\r\n    [key: string]: Task;\r\n  };\r\n  allIds: string[];\r\n}\r\n\r\nexport interface StatusData {\r\n  byId: {\r\n    [key: string]: Status;\r\n  };\r\n  allIds: string[];\r\n}\r\nexport interface Data {\r\n  tasks: TasksData;\r\n  status: StatusData;\r\n}\r\n\r\nexport interface TasksModel {\r\n  data: Data;\r\n  tasksByStatus: Computed<TasksModel, TasksByStatus[]>;\r\n  setStatus: Action<TasksModel, StatusData>;\r\n  createStatus: Action<TasksModel, Partial<Status>>;\r\n  editStatus: Action<TasksModel, Partial<Status>>;\r\n  moveTask: Thunk<TasksModel, DropResult>;\r\n}\r\n\r\nconst INITIAL_STATE: Data = {\r\n  tasks: {\r\n    byId: {\r\n      \"task-1\": {\r\n        id: \"task-1\",\r\n        content: \"Wash the dishes\",\r\n        priority: \"low\" as Priority,\r\n      },\r\n      \"task-2\": {\r\n        id: \"task-2\",\r\n        content: \"Procratinate\",\r\n        priority: \"high\" as Priority,\r\n      },\r\n      \"task-3\": {\r\n        id: \"task-3\",\r\n        content: \"Do some actual work\",\r\n        priority: \"medium\" as Priority,\r\n      },\r\n      \"task-4\": {\r\n        id: \"task-4\",\r\n        content: \"Sleep, please! 😢😢😢😢\",\r\n        priority: \"low\" as Priority,\r\n      },\r\n      \"task-5\": {\r\n        id: \"task-5\",\r\n        content: \"Stay awake at all costs!\",\r\n        priority: \"high\" as Priority,\r\n      },\r\n    },\r\n    allIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\", \"task-5\"],\r\n  },\r\n  status: {\r\n    byId: {\r\n      \"column-1\": {\r\n        id: \"column-1\",\r\n        title: \"To Do\",\r\n        tasks: [\"task-1\", \"task-2\"],\r\n      },\r\n      \"column-2\": {\r\n        id: \"column-2\",\r\n        title: \"Doing\",\r\n        tasks: [\"task-3\", \"task-4\", \"task-5\"],\r\n      },\r\n    },\r\n    allIds: [\"column-1\", \"column-2\"],\r\n  },\r\n};\r\n\r\nexport const tasksModel: TasksModel = {\r\n  data: INITIAL_STATE,\r\n  tasksByStatus: computed((state) => {\r\n    const { tasks, status } = state.data;\r\n    const statusValues = status.allIds.map((id) => status.byId[id]);\r\n    console.log(statusValues);\r\n    const resolveTask = (taskId: string) => tasks.byId[taskId];\r\n    const mapTasks = (taskAllIds: string[]) => taskAllIds.map(resolveTask);\r\n    return statusValues.map((status: Status) => ({\r\n      ...status,\r\n      tasks: mapTasks(status.tasks),\r\n    }));\r\n  }),\r\n\r\n  setStatus: action((state, payload) => {\r\n    state.data.status = payload;\r\n  }),\r\n  createStatus: action((state, payload) => {\r\n    const uuid = uuidv4();\r\n    state.data.status = {\r\n      byId: {\r\n        ...state.data.status.byId,\r\n        [uuid]: {\r\n          id: uuid,\r\n          title: payload.title || \"New Column\",\r\n          tasks: [],\r\n        },\r\n      },\r\n      allIds: [...state.data.status.allIds, uuid],\r\n    };\r\n  }),\r\n  editStatus: action((state, payload) => {\r\n    if (payload?.id) {\r\n      state.data.status = {\r\n        byId: {\r\n          ...state.data.status.byId,\r\n          [payload.id]: {\r\n            ...state.data.status.byId[payload.id],\r\n            title: payload.title || state.data.status.byId[payload.id].title,\r\n          },\r\n        },\r\n        allIds: [...state.data.status.allIds],\r\n      };\r\n    } else return state;\r\n  }),\r\n\r\n  moveTask: thunk((actions, payload, { getState }) => {\r\n    const { destination, source, draggableId } = payload;\r\n    if (\r\n      !destination ||\r\n      (destination.droppableId === source.droppableId &&\r\n        destination.index === source.index)\r\n    ) {\r\n      return;\r\n    }\r\n    const sourceColumn = getState().data.status.byId[source.droppableId];\r\n    const destinationColumn = getState().data.status.byId[\r\n      destination.droppableId\r\n    ];\r\n    const sourceTaskIds = [...sourceColumn.tasks];\r\n    const destinationTaskIds = [...destinationColumn.tasks];\r\n\r\n    if (destination.droppableId === source.droppableId) {\r\n      sourceTaskIds.splice(source.index, 1);\r\n      sourceTaskIds.splice(destination.index, 0, draggableId);\r\n      actions.setStatus({\r\n        ...getState().data.status,\r\n        byId: {\r\n          ...getState().data.status.byId,\r\n          [source.droppableId]: {\r\n            ...sourceColumn,\r\n            tasks: sourceTaskIds,\r\n          },\r\n        },\r\n      });\r\n    } else {\r\n      sourceTaskIds.splice(source.index, 1);\r\n      destinationTaskIds.splice(destination.index, 0, draggableId);\r\n      actions.setStatus({\r\n        ...getState().data.status,\r\n        byId: {\r\n          ...getState().data.status.byId,\r\n          [source.droppableId]: {\r\n            ...sourceColumn,\r\n            tasks: sourceTaskIds,\r\n          },\r\n          [destination.droppableId]: {\r\n            ...destinationColumn,\r\n            tasks: destinationTaskIds,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }),\r\n};\r\n","import { createStore, createTypedHooks } from \"easy-peasy\";\r\nimport { tasksModel, TasksModel } from \"./tasks\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\ninterface StoreModel {\r\n  tasks: TasksModel;\r\n}\r\n\r\nconst storeModel: StoreModel = {\r\n  tasks: tasksModel,\r\n};\r\n\r\nconst typedHooks = createTypedHooks<StoreModel>();\r\n\r\nexport const useStoreActions = typedHooks.useStoreActions;\r\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\r\nexport const useStoreState = typedHooks.useStoreState;\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage: storage,\r\n};\r\nexport const store = createStore(storeModel, {\r\n  reducerEnhancer: (reducer) => persistReducer(persistConfig, reducer),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport Column from \"components/Column\";\r\nimport { Flex } from \"@chakra-ui/core\";\r\nimport Navbar from \"components/Navbar\";\r\nimport { useStoreState, useStoreActions } from \"models\";\r\n\r\nfunction Kaban() {\r\n  const tasksByStatus = useStoreState((state) => state.tasks.tasksByStatus);\r\n  const moveTask = useStoreActions((actions) => actions.tasks.moveTask);\r\n  const createStatus = useStoreActions((actions) => actions.tasks.createStatus);\r\n  const editStatus = useStoreActions((actions) => actions.tasks.editStatus);\r\n\r\n  return (\r\n    <Flex h=\"100%\" direction=\"column\">\r\n      <Navbar />\r\n      <Flex flex={1} mt={15} wrap=\"nowrap\" overflowX=\"scroll\">\r\n        <DragDropContext onDragEnd={moveTask}>\r\n          {tasksByStatus.map((status) => {\r\n            const column = status;\r\n            return (\r\n              <Column\r\n                key={column.id}\r\n                column={column}\r\n                createStatus={createStatus}\r\n                editStatus={editStatus}\r\n              />\r\n            );\r\n          })}\r\n          <Column\r\n            key=\"new-column\"\r\n            createStatus={createStatus}\r\n            editStatus={editStatus}\r\n          />\r\n        </DragDropContext>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Kaban;\r\n","import React from \"react\";\r\nimport { ThemeProvider } from \"@chakra-ui/core\";\r\nimport { CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\r\nimport Kaban from \"pages/Kaban\";\r\n\r\nimport { store, persistor } from \"models\";\r\nimport { StoreProvider } from \"easy-peasy\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <StoreProvider store={store}>\r\n      <PersistGate persistor={persistor}>\r\n        <ThemeProvider>\r\n          <ColorModeProvider>\r\n            <CSSReset />\r\n            <Kaban />\r\n          </ColorModeProvider>\r\n        </ThemeProvider>\r\n      </PersistGate>\r\n    </StoreProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}